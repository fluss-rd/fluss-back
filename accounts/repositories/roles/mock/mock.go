// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/flussrd/fluss-back/accounts/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateRole provides a mock function with given fields: ctx, role
func (_m *Repository) CreateRole(ctx context.Context, role models.Role) models.Role {
	ret := _m.Called(ctx, role)

	var r0 models.Role
	if rf, ok := ret.Get(0).(func(context.Context, models.Role) models.Role); ok {
		r0 = rf(ctx, role)
	} else {
		r0 = ret.Get(0).(models.Role)
	}

	return r0
}

// GetRole provides a mock function with given fields: ctx, roleName
func (_m *Repository) GetRole(ctx context.Context, roleName string) (models.Role, error) {
	ret := _m.Called(ctx, roleName)

	var r0 models.Role
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Role); ok {
		r0 = rf(ctx, roleName)
	} else {
		r0 = ret.Get(0).(models.Role)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRole provides a mock function with given fields: ctx, userID
func (_m *Repository) GetUserRole(ctx context.Context, userID string) ([]models.Role, error) {
	ret := _m.Called(ctx, userID)

	var r0 []models.Role
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Role); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
